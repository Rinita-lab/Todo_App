{"ast":null,"code":"//creating a slice\nimport { createSlice } from \"@reduxjs/toolkit\";\n//defining our initial state\nconst initialState = {\n  todoList: [],\n  sortCriteria: \"All\"\n};\nconst ToDoSlice = createSlice({\n  name: \"todo\",\n  initialState,\n  //all our reducers or functionalities required\n  reducers: {\n    //setting the todo list\n    setTodoList: (state, action) => {\n      state.todoList = action.payload;\n    },\n    //adding a task with data, id and initially marked as not complete\n    addTodo: (state, action) => {\n      state.todoList.push({\n        task: action.payload.task,\n        id: action.payload.id,\n        completed: false\n      });\n    },\n    //filtering of tasks(all, completed, not completed)\n    sortTodo: (state, action) => {\n      state.sortCriteria = action.payload;\n    },\n    //updating the task where current id matches an existing id\n    updateTodo: (state, action) => {\n      const {\n        id,\n        task\n      } = action.payload;\n      const index = state.todoList.findIndex(todo => todo.id === id);\n      state.todoList[index].task = task;\n    },\n    //marks whether a task is completed or not\n    toggleCompleted: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      const index = state.todoList.findIndex(todo => todo.id === id);\n      state.todoList[index].completed = !state.todoList[index].completed;\n    }\n  }\n});\n\n//exporting the functionalities to be used in other modules\nexport const {\n  setTodoList,\n  addTodo,\n  sortTodo,\n  updateTodo,\n  toggleCompleted\n} = ToDoSlice.actions;\nexport default ToDoSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","todoList","sortCriteria","ToDoSlice","name","reducers","setTodoList","state","action","payload","addTodo","push","task","id","completed","sortTodo","updateTodo","index","findIndex","todo","toggleCompleted","actions","reducer"],"sources":["C:/Users/ABC/Downloads/shopping-cart-starter/starter/src/ToDoSlice.jsx"],"sourcesContent":["//creating a slice\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n//defining our initial state\r\nconst initialState = {\r\n  todoList: [],\r\n  sortCriteria: \"All\",\r\n};\r\n\r\nconst ToDoSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState,\r\n  //all our reducers or functionalities required\r\n  reducers: {\r\n    //setting the todo list\r\n    setTodoList: (state, action) => {\r\n      state.todoList = action.payload;\r\n    },\r\n    //adding a task with data, id and initially marked as not complete\r\n    addTodo: (state, action) => {\r\n      state.todoList.push({\r\n        task: action.payload.task,\r\n        id: action.payload.id,\r\n        completed: false,\r\n      });\r\n    },\r\n    //filtering of tasks(all, completed, not completed)\r\n    sortTodo: (state, action) => {\r\n      state.sortCriteria = action.payload;\r\n    },\r\n    //updating the task where current id matches an existing id\r\n    updateTodo: (state, action) => {\r\n      const { id, task } = action.payload;\r\n      const index = state.todoList.findIndex((todo) => todo.id === id);\r\n      state.todoList[index].task = task;\r\n    },\r\n    //marks whether a task is completed or not\r\n    toggleCompleted: (state, action) => {\r\n      const { id } = action.payload;\r\n      const index = state.todoList.findIndex((todo) => todo.id === id);\r\n      state.todoList[index].completed = !state.todoList[index].completed;\r\n    },\r\n  },\r\n});\r\n\r\n//exporting the functionalities to be used in other modules\r\nexport const { setTodoList, addTodo, sortTodo, updateTodo, toggleCompleted } = ToDoSlice.actions;\r\n\r\nexport default ToDoSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZ;EACAK,QAAQ,EAAE;IACR;IACAC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACN,QAAQ,GAAGO,MAAM,CAACC,OAAO;IACjC,CAAC;IACD;IACAC,OAAO,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACN,QAAQ,CAACU,IAAI,CAAC;QAClBC,IAAI,EAAEJ,MAAM,CAACC,OAAO,CAACG,IAAI;QACzBC,EAAE,EAAEL,MAAM,CAACC,OAAO,CAACI,EAAE;QACrBC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC;IACD;IACAC,QAAQ,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACL,YAAY,GAAGM,MAAM,CAACC,OAAO;IACrC,CAAC;IACD;IACAO,UAAU,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEK,EAAE;QAAED;MAAK,CAAC,GAAGJ,MAAM,CAACC,OAAO;MACnC,MAAMQ,KAAK,GAAGV,KAAK,CAACN,QAAQ,CAACiB,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACN,EAAE,KAAKA,EAAE,CAAC;MAChEN,KAAK,CAACN,QAAQ,CAACgB,KAAK,CAAC,CAACL,IAAI,GAAGA,IAAI;IACnC,CAAC;IACD;IACAQ,eAAe,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAClC,MAAM;QAAEK;MAAG,CAAC,GAAGL,MAAM,CAACC,OAAO;MAC7B,MAAMQ,KAAK,GAAGV,KAAK,CAACN,QAAQ,CAACiB,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACN,EAAE,KAAKA,EAAE,CAAC;MAChEN,KAAK,CAACN,QAAQ,CAACgB,KAAK,CAAC,CAACH,SAAS,GAAG,CAACP,KAAK,CAACN,QAAQ,CAACgB,KAAK,CAAC,CAACH,SAAS;IACpE;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAER,WAAW;EAAEI,OAAO;EAAEK,QAAQ;EAAEC,UAAU;EAAEI;AAAgB,CAAC,GAAGjB,SAAS,CAACkB,OAAO;AAEhG,eAAelB,SAAS,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}